diff --git a/Makefile b/Makefile
index 328f9c6..7f7abe6 100644
--- a/Makefile
+++ b/Makefile
@@ -56,12 +56,17 @@ LD = $(TOOLPREFIX)ld
 OBJCOPY = $(TOOLPREFIX)objcopy
 OBJDUMP = $(TOOLPREFIX)objdump
 
+ifndef SCHEDFLAG
+SCHEDFLAG := DEFAULT
+endif
+
 CFLAGS = -Wall -Werror -O -fno-omit-frame-pointer -ggdb
 CFLAGS += -MD
 CFLAGS += -mcmodel=medany
 CFLAGS += -ffreestanding -fno-common -nostdlib -mno-relax
 CFLAGS += -I.
 CFLAGS += $(shell $(CC) -fno-stack-protector -E -x c /dev/null >/dev/null 2>&1 && echo -fno-stack-protector)
+CFLAGS += -D $(SCHEDFLAG)
 
 # Disable PIE when possible (for Ubuntu 16.10 toolchain)
 ifneq ($(shell $(CC) -dumpspecs 2>/dev/null | grep -e '[^f]no-pie'),)
@@ -132,6 +137,8 @@ UPROGS=\
 	$U/_grind\
 	$U/_wc\
 	$U/_zombie\
+	$U/_test\
+	$U/_env\
 
 fs.img: mkfs/mkfs README $(UPROGS)
 	mkfs/mkfs fs.img README $(UPROGS)
@@ -153,7 +160,7 @@ QEMUGDB = $(shell if $(QEMU) -help | grep -q '^-gdb'; \
 	then echo "-gdb tcp::$(GDBPORT)"; \
 	else echo "-s -p $(GDBPORT)"; fi)
 ifndef CPUS
-CPUS := 3
+CPUS := 1
 endif
 
 QEMUOPTS = -machine virt -bios none -kernel $K/kernel -m 128M -smp $(CPUS) -nographic
diff --git a/kernel/defs.h b/kernel/defs.h
index 3564db4..b539949 100644
--- a/kernel/defs.h
+++ b/kernel/defs.h
@@ -94,7 +94,7 @@ struct cpu*     mycpu(void);
 struct cpu*     getmycpu(void);
 struct proc*    myproc();
 void            procinit(void);
-void            scheduler(void) __attribute__((noreturn));
+void            scheduler(void);
 void            sched(void);
 void            sleep(void*, struct spinlock*);
 void            userinit(void);
@@ -104,6 +104,14 @@ void            yield(void);
 int             either_copyout(int user_dst, uint64 dst, void *src, uint64 len);
 int             either_copyin(void *dst, int user_src, uint64 src, uint64 len);
 void            procdump(void);
+int             pause_system(int);
+int             kill_system(void);
+void            roundRobin(void)  __attribute__((noreturn));
+void            sjf(void) __attribute__((noreturn));
+void            fcfs(void) __attribute__((noreturn));
+void            update_cpu_ticks(struct proc*);
+void            start_running_process(struct proc*, struct cpu*);
+void            print_stats(void);
 
 // swtch.S
 void            swtch(struct context*, struct context*);
diff --git a/kernel/proc.c b/kernel/proc.c
index 22e7ce4..21dc41e 100644
--- a/kernel/proc.c
+++ b/kernel/proc.c
@@ -12,6 +12,13 @@ struct proc proc[NPROC];
 
 struct proc *initproc;
 
+uint sleeping_processes_mean, running_processes_mean, runnable_processes_mean = 0;
+uint number_process = 0;   // number of processes from starting time
+uint program_time = 0;    // running time of all processes
+uint start_time;
+uint cpu_utilization = 0;
+uint rate = 5;
+
 int nextpid = 1;
 struct spinlock pid_lock;
 
@@ -54,6 +61,7 @@ procinit(void)
       initlock(&p->lock, "proc");
       p->kstack = KSTACK((int) (p - proc));
   }
+  start_time = ticks;   //start time initiate
 }
 
 // Must be called with interrupts disabled,
@@ -119,7 +127,11 @@ allocproc(void)
 found:
   p->pid = allocpid();
   p->state = USED;
-
+  p->mean_ticks = 0;
+  p->last_cpu_ticks = 0;
+  p->runnable_time = 0;
+  p->running_time = 0;
+  p->sleeping_time = 0;
   // Allocate a trapframe page.
   if((p->trapframe = (struct trapframe *)kalloc()) == 0){
     freeproc(p);
@@ -243,7 +255,8 @@ userinit(void)
   p->cwd = namei("/");
 
   p->state = RUNNABLE;
-
+  p->last_runnable_time = ticks;
+  p->start_session_ticks = ticks;
   release(&p->lock);
 }
 
@@ -313,6 +326,8 @@ fork(void)
 
   acquire(&np->lock);
   np->state = RUNNABLE;
+  p->last_runnable_time = ticks;
+  np->start_session_ticks = ticks;
   release(&np->lock);
 
   return pid;
@@ -372,6 +387,17 @@ exit(int status)
   p->state = ZOMBIE;
 
   release(&wait_lock);
+  p->running_time += (ticks - p->start_session_ticks);
+
+  sleeping_processes_mean = ((sleeping_processes_mean * number_process) + p->sleeping_time) / (number_process + 1);
+  running_processes_mean = ((running_processes_mean * number_process) + p->running_time) / (number_process + 1) ;
+  runnable_processes_mean = ((runnable_processes_mean * number_process) + p->runnable_time) / (number_process + 1) ;
+
+  number_process += 1;
+
+  program_time += p->running_time;
+
+  cpu_utilization = (program_time * 100) / (ticks - start_time);
 
   // Jump into the scheduler, never to return.
   sched();
@@ -434,36 +460,162 @@ wait(uint64 addr)
 //  - swtch to start running that process.
 //  - eventually that process transfers control
 //    via swtch back to the scheduler.
+int pause_state = 0;
+int pause_ticks = -1;
+
+int
+to_run_process(struct proc* p)
+{
+    if((p->pid == 1 || p->pid == 2) && p->state == RUNNABLE)
+        return 1;
+    if (p->state == RUNNABLE && pause_state == 0)
+        return 1;
+    return 0;
+}
+
+
+
 void
 scheduler(void)
 {
-  struct proc *p;
-  struct cpu *c = mycpu();
-  
-  c->proc = 0;
-  for(;;){
-    // Avoid deadlock by ensuring that devices can interrupt.
-    intr_on();
+#ifdef DEFAULT
+    roundRobin();
+#elif SJF
+    sjf();
+#elif FCFS
+    fcfs();
+#endif
+}
+
+
+void start_running_process(struct proc *p, struct cpu *c) {
+    if(p->state != RUNNABLE)  // in SJF and FCFS the process can change state while we check which one is minimal
+        return;
+    p->state = RUNNING;
+    c->proc = p;
+    p->runnable_time += (ticks - p->start_session_ticks);
+    p->start_session_ticks = ticks;
+    swtch(&c->context, &p->context);
+    //printf("%d\n",(p->state==RUNNABLE)); test that there are no interrupts
+}
+
+void
+sjf(void)
+{
+    printf("SJF Policy \n");
+    struct proc *p;
+    struct cpu *c = mycpu();
+    c->proc = 0;
+    for(;;){
+        // Avoid deadlock by ensuring that devices can interrupt.
+        intr_on();
+        struct proc *minProc;
+        int minMeanTicks = -1;
+        for(p = proc; p < &proc[NPROC]; p++) {
+            acquire(&p->lock);
+            if(to_run_process(p)) {
+                if (minMeanTicks == -1 || p->mean_ticks < minMeanTicks) {
+                    minProc = p;
+                    minMeanTicks = p->mean_ticks;
+                }
+            }
+            else if (pause_state == 1 && ticks >= pause_ticks) { //reached time to wait for pause_system call
+                pause_state = 0;
+                pause_ticks = -1;
+            }
+            release(&p->lock);
+        }
+
+        if (minMeanTicks == -1)
+            continue;
+
+        /*runs the process with min mean ticks*/
+        acquire(&minProc->lock);
+        start_running_process(minProc, c);
 
-    for(p = proc; p < &proc[NPROC]; p++) {
-      acquire(&p->lock);
-      if(p->state == RUNNABLE) {
-        // Switch to chosen process.  It is the process's job
-        // to release its lock and then reacquire it
-        // before jumping back to us.
-        p->state = RUNNING;
-        c->proc = p;
-        swtch(&c->context, &p->context);
 
         // Process is done running for now.
         // It should have changed its p->state before coming back.
         c->proc = 0;
-      }
-      release(&p->lock);
+        release(&minProc->lock);
+
+    }
+}
+
+void
+fcfs(void)
+{
+    printf("FCFS Policy \n");
+    struct proc *p;
+    struct cpu *c = mycpu();
+    c->proc = 0;
+    for(;;){
+        // Avoid deadlock by ensuring that devices can interrupt.
+        intr_on();
+        struct proc *minProc;
+        int minRunnable = -1;
+        for(p = proc; p < &proc[NPROC]; p++) {
+            acquire(&p->lock);
+            if(to_run_process(p)) {
+                if (minRunnable == -1 || p->last_runnable_time < minRunnable) {
+                    minProc = p;
+                    minRunnable = p->last_runnable_time;
+                }
+            }
+            else if (pause_state == 1 && ticks >= pause_ticks) { //reached time to wait for pause_system call
+                pause_state = 0;
+                pause_ticks = -1;
+            }
+            release(&p->lock);
+        }
+
+        if (minRunnable == -1)
+            continue;
+
+        /*runs the process with min mean ticks*/
+        acquire(&minProc->lock);
+        start_running_process(minProc, c);
+
+        // Process is done running for now.
+        // It should have changed its p->state before coming back.
+        c->proc = 0;
+        release(&minProc->lock);
     }
-  }
 }
 
+void
+roundRobin(void)
+{
+    printf("Round Robin Policy \n");
+    struct proc *p;
+    struct cpu *c = mycpu();
+    c->proc = 0;
+    for(;;){
+        // Avoid deadlock by ensuring that devices can interrupt.
+        intr_on();
+
+        for(p = proc; p < &proc[NPROC]; p++) {
+            acquire(&p->lock);
+            if(to_run_process(p)) {
+                // Switch to chosen process.  It is the process's job
+                // to release its lock and then reacquire it
+                // before jumping back to us.
+                start_running_process(p, c);
+
+                // Process is done running for now.
+                // It should have changed its p->state before coming back.
+                c->proc = 0;
+            }
+            else if (pause_state == 1 && ticks >= pause_ticks) { //reached time to wait for pause_system call
+                pause_state = 0;
+                pause_ticks = -1;
+            }
+            release(&p->lock);
+        }
+    }
+}
+
+
 // Switch to scheduler.  Must hold only p->lock
 // and have changed proc->state. Saves and restores
 // intena because intena is a property of this
@@ -498,6 +650,9 @@ yield(void)
   struct proc *p = myproc();
   acquire(&p->lock);
   p->state = RUNNABLE;
+  p->last_runnable_time = ticks;     //for FCFS maintenance
+  p->running_time += (ticks - p->start_session_ticks);
+  update_cpu_ticks(p);
   sched();
   release(&p->lock);
 }
@@ -543,7 +698,8 @@ sleep(void *chan, struct spinlock *lk)
   // Go to sleep.
   p->chan = chan;
   p->state = SLEEPING;
-
+  p->running_time += (ticks - p->start_session_ticks);
+  update_cpu_ticks(p);
   sched();
 
   // Tidy up.
@@ -566,6 +722,9 @@ wakeup(void *chan)
       acquire(&p->lock);
       if(p->state == SLEEPING && p->chan == chan) {
         p->state = RUNNABLE;
+        p->last_runnable_time = ticks; //for FCFS maintenance
+        p->sleeping_time += (ticks - p->start_session_ticks);
+        p->start_session_ticks = ticks;
       }
       release(&p->lock);
     }
@@ -587,6 +746,9 @@ kill(int pid)
       if(p->state == SLEEPING){
         // Wake process from sleep().
         p->state = RUNNABLE;
+        p->last_runnable_time = ticks;
+        p->sleeping_time += (ticks - p->start_session_ticks);
+        p->start_session_ticks = ticks;
       }
       release(&p->lock);
       return 0;
@@ -654,3 +816,41 @@ procdump(void)
     printf("\n");
   }
 }
+
+int
+pause_system(int seconds)
+{
+    pause_state = 1;
+    pause_ticks = seconds * 10 + ticks;
+    yield();
+    return 0;
+}
+
+int
+kill_system(void)
+{
+    struct proc *p;
+    for(p = proc; p < &proc[NPROC]; p++){
+        if (p->pid == 1 || p->pid == 2)
+            continue;
+
+        if (kill(p->pid) == -1)
+            return -1;
+    }
+    return 0;
+}
+
+void update_cpu_ticks(struct proc *p) {
+    p->last_cpu_ticks = ticks - p->start_session_ticks;
+    p->mean_ticks = ((10 - rate) * p->mean_ticks + p->last_cpu_ticks * rate) / 10;
+    p->start_session_ticks = ticks;
+}
+
+void print_stats(){
+    printf("the mean running time is %d\n", running_processes_mean);
+    printf("the number_process %d\n", number_process);
+    printf("the mean runnable time is %d\n", runnable_processes_mean);
+    printf("the mean sleeping time is %d\n", sleeping_processes_mean);
+    printf("the CPU utilization running time is %d\n", cpu_utilization);
+    printf("the Global running time is %d\n", program_time);
+}
\ No newline at end of file
diff --git a/kernel/proc.h b/kernel/proc.h
index f6ca8b7..39368c7 100644
--- a/kernel/proc.h
+++ b/kernel/proc.h
@@ -105,4 +105,14 @@ struct proc {
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
+
+  uint64 mean_ticks;            // mean ticks that took the process
+  uint64 last_cpu_ticks;          // amount of ticks in last run
+  uint64 start_session_ticks;        // number of ticks when the process started current mode
+  uint64  last_runnable_time;   //the ticks when the process started to run the last time
+
+  uint64 sleeping_time;         //Total time spent in the SLEEPING state
+  uint64 runnable_time;         // Total time spent in the RUNNABLE state.
+  uint64 running_time;          // Total time spent in the RUNNING state.
+
 };
diff --git a/kernel/syscall.c b/kernel/syscall.c
index c1b3670..3a8812c 100644
--- a/kernel/syscall.c
+++ b/kernel/syscall.c
@@ -104,6 +104,10 @@ extern uint64 sys_unlink(void);
 extern uint64 sys_wait(void);
 extern uint64 sys_write(void);
 extern uint64 sys_uptime(void);
+extern uint64 sys_pause_system(void);
+extern uint64 sys_kill_system(void);
+extern uint64 sys_print_stats(void);
+
 
 static uint64 (*syscalls[])(void) = {
 [SYS_fork]    sys_fork,
@@ -127,6 +131,9 @@ static uint64 (*syscalls[])(void) = {
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+[SYS_pause_system]  sys_pause_system,
+[SYS_kill_system]   sys_kill_system,
+[SYS_print_stats]   sys_print_stats,
 };
 
 void
diff --git a/kernel/syscall.h b/kernel/syscall.h
index bc5f356..a7befa0 100644
--- a/kernel/syscall.h
+++ b/kernel/syscall.h
@@ -20,3 +20,6 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+#define SYS_pause_system 22
+#define SYS_kill_system  23
+#define SYS_print_stats  24
diff --git a/kernel/sysproc.c b/kernel/sysproc.c
index e8bcda9..4346c68 100644
--- a/kernel/sysproc.c
+++ b/kernel/sysproc.c
@@ -95,3 +95,26 @@ sys_uptime(void)
   release(&tickslock);
   return xticks;
 }
+
+uint64
+sys_pause_system(void)
+{
+    int seconds = 7;
+    //if(argint(0, &seconds) < 0)
+    pause_system(seconds);
+    return 0;
+}
+
+uint64
+sys_kill_system(void)
+{
+    kill_system();
+    return 0;
+}
+
+uint64
+sys_print_stats(void)
+{
+    print_stats();
+    return 0;
+}
\ No newline at end of file
diff --git a/kernel/trap.c b/kernel/trap.c
index a63249e..801ee3f 100644
--- a/kernel/trap.c
+++ b/kernel/trap.c
@@ -6,6 +6,12 @@
 #include "proc.h"
 #include "defs.h"
 
+#ifdef DEFAULT
+int isRR = 1;
+#else
+int isRR = 0;
+#endif
+
 struct spinlock tickslock;
 uint ticks;
 
@@ -77,7 +83,7 @@ usertrap(void)
     exit(-1);
 
   // give up the CPU if this is a timer interrupt.
-  if(which_dev == 2)
+  if(which_dev == 2 && isRR)
     yield();
 
   usertrapret();
@@ -130,7 +136,10 @@ usertrapret(void)
 
 // interrupts and exceptions from kernel code go here via kernelvec,
 // on whatever the current kernel stack is.
-void 
+
+
+void
+
 kerneltrap()
 {
   int which_dev = 0;
@@ -150,7 +159,7 @@ kerneltrap()
   }
 
   // give up the CPU if this is a timer interrupt.
-  if(which_dev == 2 && myproc() != 0 && myproc()->state == RUNNING)
+  if(which_dev == 2 && myproc() != 0 && myproc()->state == RUNNING && isRR)
     yield();
 
   // the yield() may have caused some traps to occur,
diff --git a/user/env.c b/user/env.c
new file mode 100644
index 0000000..0c0974c
--- /dev/null
+++ b/user/env.c
@@ -0,0 +1,36 @@
+#include "kernel/param.h"
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+#include "kernel/fs.h"
+#include "kernel/fcntl.h"
+#include "kernel/syscall.h"
+#include "kernel/memlayout.h"
+#include "kernel/riscv.h"
+
+void env_large(){
+
+    int pid;
+    int status;
+
+    for (int i=0; i<4; i++) {
+        if ((pid = fork()) == 0) {
+            for (int i = 0; i <= 10000000; i++){
+                if (i % 10000 == 0){
+                    printf("%d", i);
+                }
+            }
+            exit(0);
+        }
+    }
+
+    while (wait(&status) > 0);
+}
+
+int
+main(int argc, char *argv[])
+{
+    env_large();
+    print_stats();
+    exit(0);
+}
\ No newline at end of file
diff --git a/user/test.c b/user/test.c
new file mode 100644
index 0000000..e0068c3
--- /dev/null
+++ b/user/test.c
@@ -0,0 +1,47 @@
+
+#include "kernel/param.h"
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+#include "kernel/fs.h"
+#include "kernel/fcntl.h"
+#include "kernel/syscall.h"
+#include "kernel/memlayout.h"
+#include "kernel/riscv.h"
+
+void pause_system_dem(int interval, int pause_seconds, int loop_size) {
+    int pid = getpid();
+    for (int i = 0; i < loop_size; i++) {
+        if (i % interval == 0 && pid == getpid()) {
+            printf("pause system %d/%d completed.\n", i, loop_size);
+        }
+        if (i == loop_size / 2) {
+            pause_system(pause_seconds);
+        }
+    }
+    printf("\n");
+}
+
+void kill_system_dem(int interval, int loop_size) {
+    int pid = getpid();
+    for (int i = 0; i < loop_size; i++) {
+        if (i % interval == 0 && pid == getpid()) {
+            printf("kill system %d/%d completed.\n", i, loop_size);
+        }
+        if (i == loop_size / 2) {
+            kill_system();
+        }
+    }
+    printf("\n");
+}
+
+
+
+
+int
+main(int argc, char *argv[])
+{
+    pause_system_dem(10, 10, 100);
+    kill_system_dem(10, 100);
+    exit(0);
+}
diff --git a/user/user.h b/user/user.h
index b71ecda..b7a54a8 100644
--- a/user/user.h
+++ b/user/user.h
@@ -23,6 +23,9 @@ int getpid(void);
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
+int pause_system(int);
+int kill_system(void);
+void print_stats(void);
 
 // ulib.c
 int stat(const char*, struct stat*);
diff --git a/user/usys.pl b/user/usys.pl
index 01e426e..062b29f 100755
--- a/user/usys.pl
+++ b/user/usys.pl
@@ -36,3 +36,6 @@ entry("getpid");
 entry("sbrk");
 entry("sleep");
 entry("uptime");
+entry("pause_system");
+entry("kill_system");
+entry("print_stats");
